// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TestData.proto

package de.hszemi.sensorid_test;

public final class TestData {
  private TestData() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface FeatureVectorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:sensorid.FeatureVector)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required string sensortype = 1;</code>
     */
    boolean hasSensortype();
    /**
     * <code>required string sensortype = 1;</code>
     */
    java.lang.String getSensortype();
    /**
     * <code>required string sensortype = 1;</code>
     */
    com.google.protobuf.ByteString
        getSensortypeBytes();

    /**
     * <code>required string sensorname = 2;</code>
     */
    boolean hasSensorname();
    /**
     * <code>required string sensorname = 2;</code>
     */
    java.lang.String getSensorname();
    /**
     * <code>required string sensorname = 2;</code>
     */
    com.google.protobuf.ByteString
        getSensornameBytes();

    /**
     * <code>required double mean_x = 3;</code>
     */
    boolean hasMeanX();
    /**
     * <code>required double mean_x = 3;</code>
     */
    double getMeanX();

    /**
     * <code>required double mean_y = 4;</code>
     */
    boolean hasMeanY();
    /**
     * <code>required double mean_y = 4;</code>
     */
    double getMeanY();

    /**
     * <code>required double mean_z = 5;</code>
     */
    boolean hasMeanZ();
    /**
     * <code>required double mean_z = 5;</code>
     */
    double getMeanZ();

    /**
     * <code>required double min_x = 6;</code>
     */
    boolean hasMinX();
    /**
     * <code>required double min_x = 6;</code>
     */
    double getMinX();

    /**
     * <code>required double min_y = 7;</code>
     */
    boolean hasMinY();
    /**
     * <code>required double min_y = 7;</code>
     */
    double getMinY();

    /**
     * <code>required double min_z = 8;</code>
     */
    boolean hasMinZ();
    /**
     * <code>required double min_z = 8;</code>
     */
    double getMinZ();

    /**
     * <code>required double max_x = 9;</code>
     */
    boolean hasMaxX();
    /**
     * <code>required double max_x = 9;</code>
     */
    double getMaxX();

    /**
     * <code>required double max_y = 10;</code>
     */
    boolean hasMaxY();
    /**
     * <code>required double max_y = 10;</code>
     */
    double getMaxY();

    /**
     * <code>required double max_z = 11;</code>
     */
    boolean hasMaxZ();
    /**
     * <code>required double max_z = 11;</code>
     */
    double getMaxZ();

    /**
     * <code>required double stddev_x = 12;</code>
     */
    boolean hasStddevX();
    /**
     * <code>required double stddev_x = 12;</code>
     */
    double getStddevX();

    /**
     * <code>required double stddev_y = 13;</code>
     */
    boolean hasStddevY();
    /**
     * <code>required double stddev_y = 13;</code>
     */
    double getStddevY();

    /**
     * <code>required double stddev_z = 14;</code>
     */
    boolean hasStddevZ();
    /**
     * <code>required double stddev_z = 14;</code>
     */
    double getStddevZ();

    /**
     * <code>required double avgdev_x = 15;</code>
     */
    boolean hasAvgdevX();
    /**
     * <code>required double avgdev_x = 15;</code>
     */
    double getAvgdevX();

    /**
     * <code>required double avgdev_y = 16;</code>
     */
    boolean hasAvgdevY();
    /**
     * <code>required double avgdev_y = 16;</code>
     */
    double getAvgdevY();

    /**
     * <code>required double avgdev_z = 17;</code>
     */
    boolean hasAvgdevZ();
    /**
     * <code>required double avgdev_z = 17;</code>
     */
    double getAvgdevZ();

    /**
     * <code>required double skewness_x = 18;</code>
     */
    boolean hasSkewnessX();
    /**
     * <code>required double skewness_x = 18;</code>
     */
    double getSkewnessX();

    /**
     * <code>required double skewness_y = 19;</code>
     */
    boolean hasSkewnessY();
    /**
     * <code>required double skewness_y = 19;</code>
     */
    double getSkewnessY();

    /**
     * <code>required double skewness_z = 20;</code>
     */
    boolean hasSkewnessZ();
    /**
     * <code>required double skewness_z = 20;</code>
     */
    double getSkewnessZ();

    /**
     * <code>required double kurtosis_x = 21;</code>
     */
    boolean hasKurtosisX();
    /**
     * <code>required double kurtosis_x = 21;</code>
     */
    double getKurtosisX();

    /**
     * <code>required double kurtosis_y = 22;</code>
     */
    boolean hasKurtosisY();
    /**
     * <code>required double kurtosis_y = 22;</code>
     */
    double getKurtosisY();

    /**
     * <code>required double kurtosis_z = 23;</code>
     */
    boolean hasKurtosisZ();
    /**
     * <code>required double kurtosis_z = 23;</code>
     */
    double getKurtosisZ();

    /**
     * <code>required double rmsamplitude_x = 24;</code>
     */
    boolean hasRmsamplitudeX();
    /**
     * <code>required double rmsamplitude_x = 24;</code>
     */
    double getRmsamplitudeX();

    /**
     * <code>required double rmsamplitude_y = 25;</code>
     */
    boolean hasRmsamplitudeY();
    /**
     * <code>required double rmsamplitude_y = 25;</code>
     */
    double getRmsamplitudeY();

    /**
     * <code>required double rmsamplitude_z = 26;</code>
     */
    boolean hasRmsamplitudeZ();
    /**
     * <code>required double rmsamplitude_z = 26;</code>
     */
    double getRmsamplitudeZ();
  }
  /**
   * Protobuf type {@code sensorid.FeatureVector}
   */
  public static final class FeatureVector extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:sensorid.FeatureVector)
      FeatureVectorOrBuilder {
    // Use FeatureVector.newBuilder() to construct.
    private FeatureVector(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private FeatureVector(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final FeatureVector defaultInstance;
    public static FeatureVector getDefaultInstance() {
      return defaultInstance;
    }

    public FeatureVector getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private FeatureVector(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              sensortype_ = bs;
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              sensorname_ = bs;
              break;
            }
            case 25: {
              bitField0_ |= 0x00000004;
              meanX_ = input.readDouble();
              break;
            }
            case 33: {
              bitField0_ |= 0x00000008;
              meanY_ = input.readDouble();
              break;
            }
            case 41: {
              bitField0_ |= 0x00000010;
              meanZ_ = input.readDouble();
              break;
            }
            case 49: {
              bitField0_ |= 0x00000020;
              minX_ = input.readDouble();
              break;
            }
            case 57: {
              bitField0_ |= 0x00000040;
              minY_ = input.readDouble();
              break;
            }
            case 65: {
              bitField0_ |= 0x00000080;
              minZ_ = input.readDouble();
              break;
            }
            case 73: {
              bitField0_ |= 0x00000100;
              maxX_ = input.readDouble();
              break;
            }
            case 81: {
              bitField0_ |= 0x00000200;
              maxY_ = input.readDouble();
              break;
            }
            case 89: {
              bitField0_ |= 0x00000400;
              maxZ_ = input.readDouble();
              break;
            }
            case 97: {
              bitField0_ |= 0x00000800;
              stddevX_ = input.readDouble();
              break;
            }
            case 105: {
              bitField0_ |= 0x00001000;
              stddevY_ = input.readDouble();
              break;
            }
            case 113: {
              bitField0_ |= 0x00002000;
              stddevZ_ = input.readDouble();
              break;
            }
            case 121: {
              bitField0_ |= 0x00004000;
              avgdevX_ = input.readDouble();
              break;
            }
            case 129: {
              bitField0_ |= 0x00008000;
              avgdevY_ = input.readDouble();
              break;
            }
            case 137: {
              bitField0_ |= 0x00010000;
              avgdevZ_ = input.readDouble();
              break;
            }
            case 145: {
              bitField0_ |= 0x00020000;
              skewnessX_ = input.readDouble();
              break;
            }
            case 153: {
              bitField0_ |= 0x00040000;
              skewnessY_ = input.readDouble();
              break;
            }
            case 161: {
              bitField0_ |= 0x00080000;
              skewnessZ_ = input.readDouble();
              break;
            }
            case 169: {
              bitField0_ |= 0x00100000;
              kurtosisX_ = input.readDouble();
              break;
            }
            case 177: {
              bitField0_ |= 0x00200000;
              kurtosisY_ = input.readDouble();
              break;
            }
            case 185: {
              bitField0_ |= 0x00400000;
              kurtosisZ_ = input.readDouble();
              break;
            }
            case 193: {
              bitField0_ |= 0x00800000;
              rmsamplitudeX_ = input.readDouble();
              break;
            }
            case 201: {
              bitField0_ |= 0x01000000;
              rmsamplitudeY_ = input.readDouble();
              break;
            }
            case 209: {
              bitField0_ |= 0x02000000;
              rmsamplitudeZ_ = input.readDouble();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return de.hszemi.sensorid_test.TestData.internal_static_sensorid_FeatureVector_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return de.hszemi.sensorid_test.TestData.internal_static_sensorid_FeatureVector_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              de.hszemi.sensorid_test.TestData.FeatureVector.class, de.hszemi.sensorid_test.TestData.FeatureVector.Builder.class);
    }

    public static com.google.protobuf.Parser<FeatureVector> PARSER =
        new com.google.protobuf.AbstractParser<FeatureVector>() {
      public FeatureVector parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FeatureVector(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<FeatureVector> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int SENSORTYPE_FIELD_NUMBER = 1;
    private java.lang.Object sensortype_;
    /**
     * <code>required string sensortype = 1;</code>
     */
    public boolean hasSensortype() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string sensortype = 1;</code>
     */
    public java.lang.String getSensortype() {
      java.lang.Object ref = sensortype_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          sensortype_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string sensortype = 1;</code>
     */
    public com.google.protobuf.ByteString
        getSensortypeBytes() {
      java.lang.Object ref = sensortype_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        sensortype_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SENSORNAME_FIELD_NUMBER = 2;
    private java.lang.Object sensorname_;
    /**
     * <code>required string sensorname = 2;</code>
     */
    public boolean hasSensorname() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string sensorname = 2;</code>
     */
    public java.lang.String getSensorname() {
      java.lang.Object ref = sensorname_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          sensorname_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string sensorname = 2;</code>
     */
    public com.google.protobuf.ByteString
        getSensornameBytes() {
      java.lang.Object ref = sensorname_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        sensorname_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int MEAN_X_FIELD_NUMBER = 3;
    private double meanX_;
    /**
     * <code>required double mean_x = 3;</code>
     */
    public boolean hasMeanX() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required double mean_x = 3;</code>
     */
    public double getMeanX() {
      return meanX_;
    }

    public static final int MEAN_Y_FIELD_NUMBER = 4;
    private double meanY_;
    /**
     * <code>required double mean_y = 4;</code>
     */
    public boolean hasMeanY() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required double mean_y = 4;</code>
     */
    public double getMeanY() {
      return meanY_;
    }

    public static final int MEAN_Z_FIELD_NUMBER = 5;
    private double meanZ_;
    /**
     * <code>required double mean_z = 5;</code>
     */
    public boolean hasMeanZ() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required double mean_z = 5;</code>
     */
    public double getMeanZ() {
      return meanZ_;
    }

    public static final int MIN_X_FIELD_NUMBER = 6;
    private double minX_;
    /**
     * <code>required double min_x = 6;</code>
     */
    public boolean hasMinX() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required double min_x = 6;</code>
     */
    public double getMinX() {
      return minX_;
    }

    public static final int MIN_Y_FIELD_NUMBER = 7;
    private double minY_;
    /**
     * <code>required double min_y = 7;</code>
     */
    public boolean hasMinY() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required double min_y = 7;</code>
     */
    public double getMinY() {
      return minY_;
    }

    public static final int MIN_Z_FIELD_NUMBER = 8;
    private double minZ_;
    /**
     * <code>required double min_z = 8;</code>
     */
    public boolean hasMinZ() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required double min_z = 8;</code>
     */
    public double getMinZ() {
      return minZ_;
    }

    public static final int MAX_X_FIELD_NUMBER = 9;
    private double maxX_;
    /**
     * <code>required double max_x = 9;</code>
     */
    public boolean hasMaxX() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>required double max_x = 9;</code>
     */
    public double getMaxX() {
      return maxX_;
    }

    public static final int MAX_Y_FIELD_NUMBER = 10;
    private double maxY_;
    /**
     * <code>required double max_y = 10;</code>
     */
    public boolean hasMaxY() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>required double max_y = 10;</code>
     */
    public double getMaxY() {
      return maxY_;
    }

    public static final int MAX_Z_FIELD_NUMBER = 11;
    private double maxZ_;
    /**
     * <code>required double max_z = 11;</code>
     */
    public boolean hasMaxZ() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>required double max_z = 11;</code>
     */
    public double getMaxZ() {
      return maxZ_;
    }

    public static final int STDDEV_X_FIELD_NUMBER = 12;
    private double stddevX_;
    /**
     * <code>required double stddev_x = 12;</code>
     */
    public boolean hasStddevX() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>required double stddev_x = 12;</code>
     */
    public double getStddevX() {
      return stddevX_;
    }

    public static final int STDDEV_Y_FIELD_NUMBER = 13;
    private double stddevY_;
    /**
     * <code>required double stddev_y = 13;</code>
     */
    public boolean hasStddevY() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>required double stddev_y = 13;</code>
     */
    public double getStddevY() {
      return stddevY_;
    }

    public static final int STDDEV_Z_FIELD_NUMBER = 14;
    private double stddevZ_;
    /**
     * <code>required double stddev_z = 14;</code>
     */
    public boolean hasStddevZ() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>required double stddev_z = 14;</code>
     */
    public double getStddevZ() {
      return stddevZ_;
    }

    public static final int AVGDEV_X_FIELD_NUMBER = 15;
    private double avgdevX_;
    /**
     * <code>required double avgdev_x = 15;</code>
     */
    public boolean hasAvgdevX() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>required double avgdev_x = 15;</code>
     */
    public double getAvgdevX() {
      return avgdevX_;
    }

    public static final int AVGDEV_Y_FIELD_NUMBER = 16;
    private double avgdevY_;
    /**
     * <code>required double avgdev_y = 16;</code>
     */
    public boolean hasAvgdevY() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>required double avgdev_y = 16;</code>
     */
    public double getAvgdevY() {
      return avgdevY_;
    }

    public static final int AVGDEV_Z_FIELD_NUMBER = 17;
    private double avgdevZ_;
    /**
     * <code>required double avgdev_z = 17;</code>
     */
    public boolean hasAvgdevZ() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>required double avgdev_z = 17;</code>
     */
    public double getAvgdevZ() {
      return avgdevZ_;
    }

    public static final int SKEWNESS_X_FIELD_NUMBER = 18;
    private double skewnessX_;
    /**
     * <code>required double skewness_x = 18;</code>
     */
    public boolean hasSkewnessX() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>required double skewness_x = 18;</code>
     */
    public double getSkewnessX() {
      return skewnessX_;
    }

    public static final int SKEWNESS_Y_FIELD_NUMBER = 19;
    private double skewnessY_;
    /**
     * <code>required double skewness_y = 19;</code>
     */
    public boolean hasSkewnessY() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>required double skewness_y = 19;</code>
     */
    public double getSkewnessY() {
      return skewnessY_;
    }

    public static final int SKEWNESS_Z_FIELD_NUMBER = 20;
    private double skewnessZ_;
    /**
     * <code>required double skewness_z = 20;</code>
     */
    public boolean hasSkewnessZ() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>required double skewness_z = 20;</code>
     */
    public double getSkewnessZ() {
      return skewnessZ_;
    }

    public static final int KURTOSIS_X_FIELD_NUMBER = 21;
    private double kurtosisX_;
    /**
     * <code>required double kurtosis_x = 21;</code>
     */
    public boolean hasKurtosisX() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>required double kurtosis_x = 21;</code>
     */
    public double getKurtosisX() {
      return kurtosisX_;
    }

    public static final int KURTOSIS_Y_FIELD_NUMBER = 22;
    private double kurtosisY_;
    /**
     * <code>required double kurtosis_y = 22;</code>
     */
    public boolean hasKurtosisY() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>required double kurtosis_y = 22;</code>
     */
    public double getKurtosisY() {
      return kurtosisY_;
    }

    public static final int KURTOSIS_Z_FIELD_NUMBER = 23;
    private double kurtosisZ_;
    /**
     * <code>required double kurtosis_z = 23;</code>
     */
    public boolean hasKurtosisZ() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>required double kurtosis_z = 23;</code>
     */
    public double getKurtosisZ() {
      return kurtosisZ_;
    }

    public static final int RMSAMPLITUDE_X_FIELD_NUMBER = 24;
    private double rmsamplitudeX_;
    /**
     * <code>required double rmsamplitude_x = 24;</code>
     */
    public boolean hasRmsamplitudeX() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>required double rmsamplitude_x = 24;</code>
     */
    public double getRmsamplitudeX() {
      return rmsamplitudeX_;
    }

    public static final int RMSAMPLITUDE_Y_FIELD_NUMBER = 25;
    private double rmsamplitudeY_;
    /**
     * <code>required double rmsamplitude_y = 25;</code>
     */
    public boolean hasRmsamplitudeY() {
      return ((bitField0_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>required double rmsamplitude_y = 25;</code>
     */
    public double getRmsamplitudeY() {
      return rmsamplitudeY_;
    }

    public static final int RMSAMPLITUDE_Z_FIELD_NUMBER = 26;
    private double rmsamplitudeZ_;
    /**
     * <code>required double rmsamplitude_z = 26;</code>
     */
    public boolean hasRmsamplitudeZ() {
      return ((bitField0_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>required double rmsamplitude_z = 26;</code>
     */
    public double getRmsamplitudeZ() {
      return rmsamplitudeZ_;
    }

    private void initFields() {
      sensortype_ = "";
      sensorname_ = "";
      meanX_ = 0D;
      meanY_ = 0D;
      meanZ_ = 0D;
      minX_ = 0D;
      minY_ = 0D;
      minZ_ = 0D;
      maxX_ = 0D;
      maxY_ = 0D;
      maxZ_ = 0D;
      stddevX_ = 0D;
      stddevY_ = 0D;
      stddevZ_ = 0D;
      avgdevX_ = 0D;
      avgdevY_ = 0D;
      avgdevZ_ = 0D;
      skewnessX_ = 0D;
      skewnessY_ = 0D;
      skewnessZ_ = 0D;
      kurtosisX_ = 0D;
      kurtosisY_ = 0D;
      kurtosisZ_ = 0D;
      rmsamplitudeX_ = 0D;
      rmsamplitudeY_ = 0D;
      rmsamplitudeZ_ = 0D;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasSensortype()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSensorname()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMeanX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMeanY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMeanZ()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMinX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMinY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMinZ()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMaxX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMaxY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMaxZ()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasStddevX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasStddevY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasStddevZ()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAvgdevX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAvgdevY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAvgdevZ()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSkewnessX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSkewnessY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSkewnessZ()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasKurtosisX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasKurtosisY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasKurtosisZ()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRmsamplitudeX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRmsamplitudeY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRmsamplitudeZ()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getSensortypeBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getSensornameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeDouble(3, meanX_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeDouble(4, meanY_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeDouble(5, meanZ_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeDouble(6, minX_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeDouble(7, minY_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeDouble(8, minZ_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeDouble(9, maxX_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeDouble(10, maxY_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeDouble(11, maxZ_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeDouble(12, stddevX_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeDouble(13, stddevY_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeDouble(14, stddevZ_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeDouble(15, avgdevX_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeDouble(16, avgdevY_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeDouble(17, avgdevZ_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeDouble(18, skewnessX_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeDouble(19, skewnessY_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeDouble(20, skewnessZ_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeDouble(21, kurtosisX_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeDouble(22, kurtosisY_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        output.writeDouble(23, kurtosisZ_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        output.writeDouble(24, rmsamplitudeX_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        output.writeDouble(25, rmsamplitudeY_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        output.writeDouble(26, rmsamplitudeZ_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getSensortypeBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getSensornameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, meanX_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, meanY_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, meanZ_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(6, minX_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(7, minY_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(8, minZ_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(9, maxX_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(10, maxY_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(11, maxZ_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(12, stddevX_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(13, stddevY_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(14, stddevZ_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(15, avgdevX_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(16, avgdevY_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(17, avgdevZ_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(18, skewnessX_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(19, skewnessY_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(20, skewnessZ_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(21, kurtosisX_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(22, kurtosisY_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(23, kurtosisZ_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(24, rmsamplitudeX_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(25, rmsamplitudeY_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(26, rmsamplitudeZ_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static de.hszemi.sensorid_test.TestData.FeatureVector parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static de.hszemi.sensorid_test.TestData.FeatureVector parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static de.hszemi.sensorid_test.TestData.FeatureVector parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static de.hszemi.sensorid_test.TestData.FeatureVector parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static de.hszemi.sensorid_test.TestData.FeatureVector parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static de.hszemi.sensorid_test.TestData.FeatureVector parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static de.hszemi.sensorid_test.TestData.FeatureVector parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static de.hszemi.sensorid_test.TestData.FeatureVector parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static de.hszemi.sensorid_test.TestData.FeatureVector parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static de.hszemi.sensorid_test.TestData.FeatureVector parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(de.hszemi.sensorid_test.TestData.FeatureVector prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code sensorid.FeatureVector}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:sensorid.FeatureVector)
        de.hszemi.sensorid_test.TestData.FeatureVectorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return de.hszemi.sensorid_test.TestData.internal_static_sensorid_FeatureVector_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return de.hszemi.sensorid_test.TestData.internal_static_sensorid_FeatureVector_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                de.hszemi.sensorid_test.TestData.FeatureVector.class, de.hszemi.sensorid_test.TestData.FeatureVector.Builder.class);
      }

      // Construct using de.hszemi.sensorid_test.TestData.FeatureVector.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        sensortype_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        sensorname_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        meanX_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000004);
        meanY_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000008);
        meanZ_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000010);
        minX_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000020);
        minY_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000040);
        minZ_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000080);
        maxX_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000100);
        maxY_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000200);
        maxZ_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000400);
        stddevX_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000800);
        stddevY_ = 0D;
        bitField0_ = (bitField0_ & ~0x00001000);
        stddevZ_ = 0D;
        bitField0_ = (bitField0_ & ~0x00002000);
        avgdevX_ = 0D;
        bitField0_ = (bitField0_ & ~0x00004000);
        avgdevY_ = 0D;
        bitField0_ = (bitField0_ & ~0x00008000);
        avgdevZ_ = 0D;
        bitField0_ = (bitField0_ & ~0x00010000);
        skewnessX_ = 0D;
        bitField0_ = (bitField0_ & ~0x00020000);
        skewnessY_ = 0D;
        bitField0_ = (bitField0_ & ~0x00040000);
        skewnessZ_ = 0D;
        bitField0_ = (bitField0_ & ~0x00080000);
        kurtosisX_ = 0D;
        bitField0_ = (bitField0_ & ~0x00100000);
        kurtosisY_ = 0D;
        bitField0_ = (bitField0_ & ~0x00200000);
        kurtosisZ_ = 0D;
        bitField0_ = (bitField0_ & ~0x00400000);
        rmsamplitudeX_ = 0D;
        bitField0_ = (bitField0_ & ~0x00800000);
        rmsamplitudeY_ = 0D;
        bitField0_ = (bitField0_ & ~0x01000000);
        rmsamplitudeZ_ = 0D;
        bitField0_ = (bitField0_ & ~0x02000000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return de.hszemi.sensorid_test.TestData.internal_static_sensorid_FeatureVector_descriptor;
      }

      public de.hszemi.sensorid_test.TestData.FeatureVector getDefaultInstanceForType() {
        return de.hszemi.sensorid_test.TestData.FeatureVector.getDefaultInstance();
      }

      public de.hszemi.sensorid_test.TestData.FeatureVector build() {
        de.hszemi.sensorid_test.TestData.FeatureVector result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public de.hszemi.sensorid_test.TestData.FeatureVector buildPartial() {
        de.hszemi.sensorid_test.TestData.FeatureVector result = new de.hszemi.sensorid_test.TestData.FeatureVector(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.sensortype_ = sensortype_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.sensorname_ = sensorname_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.meanX_ = meanX_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.meanY_ = meanY_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.meanZ_ = meanZ_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.minX_ = minX_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.minY_ = minY_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.minZ_ = minZ_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.maxX_ = maxX_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.maxY_ = maxY_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.maxZ_ = maxZ_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.stddevX_ = stddevX_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.stddevY_ = stddevY_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.stddevZ_ = stddevZ_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.avgdevX_ = avgdevX_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.avgdevY_ = avgdevY_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.avgdevZ_ = avgdevZ_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.skewnessX_ = skewnessX_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.skewnessY_ = skewnessY_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.skewnessZ_ = skewnessZ_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00100000;
        }
        result.kurtosisX_ = kurtosisX_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00200000;
        }
        result.kurtosisY_ = kurtosisY_;
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00400000;
        }
        result.kurtosisZ_ = kurtosisZ_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00800000;
        }
        result.rmsamplitudeX_ = rmsamplitudeX_;
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x01000000;
        }
        result.rmsamplitudeY_ = rmsamplitudeY_;
        if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
          to_bitField0_ |= 0x02000000;
        }
        result.rmsamplitudeZ_ = rmsamplitudeZ_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof de.hszemi.sensorid_test.TestData.FeatureVector) {
          return mergeFrom((de.hszemi.sensorid_test.TestData.FeatureVector)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(de.hszemi.sensorid_test.TestData.FeatureVector other) {
        if (other == de.hszemi.sensorid_test.TestData.FeatureVector.getDefaultInstance()) return this;
        if (other.hasSensortype()) {
          bitField0_ |= 0x00000001;
          sensortype_ = other.sensortype_;
          onChanged();
        }
        if (other.hasSensorname()) {
          bitField0_ |= 0x00000002;
          sensorname_ = other.sensorname_;
          onChanged();
        }
        if (other.hasMeanX()) {
          setMeanX(other.getMeanX());
        }
        if (other.hasMeanY()) {
          setMeanY(other.getMeanY());
        }
        if (other.hasMeanZ()) {
          setMeanZ(other.getMeanZ());
        }
        if (other.hasMinX()) {
          setMinX(other.getMinX());
        }
        if (other.hasMinY()) {
          setMinY(other.getMinY());
        }
        if (other.hasMinZ()) {
          setMinZ(other.getMinZ());
        }
        if (other.hasMaxX()) {
          setMaxX(other.getMaxX());
        }
        if (other.hasMaxY()) {
          setMaxY(other.getMaxY());
        }
        if (other.hasMaxZ()) {
          setMaxZ(other.getMaxZ());
        }
        if (other.hasStddevX()) {
          setStddevX(other.getStddevX());
        }
        if (other.hasStddevY()) {
          setStddevY(other.getStddevY());
        }
        if (other.hasStddevZ()) {
          setStddevZ(other.getStddevZ());
        }
        if (other.hasAvgdevX()) {
          setAvgdevX(other.getAvgdevX());
        }
        if (other.hasAvgdevY()) {
          setAvgdevY(other.getAvgdevY());
        }
        if (other.hasAvgdevZ()) {
          setAvgdevZ(other.getAvgdevZ());
        }
        if (other.hasSkewnessX()) {
          setSkewnessX(other.getSkewnessX());
        }
        if (other.hasSkewnessY()) {
          setSkewnessY(other.getSkewnessY());
        }
        if (other.hasSkewnessZ()) {
          setSkewnessZ(other.getSkewnessZ());
        }
        if (other.hasKurtosisX()) {
          setKurtosisX(other.getKurtosisX());
        }
        if (other.hasKurtosisY()) {
          setKurtosisY(other.getKurtosisY());
        }
        if (other.hasKurtosisZ()) {
          setKurtosisZ(other.getKurtosisZ());
        }
        if (other.hasRmsamplitudeX()) {
          setRmsamplitudeX(other.getRmsamplitudeX());
        }
        if (other.hasRmsamplitudeY()) {
          setRmsamplitudeY(other.getRmsamplitudeY());
        }
        if (other.hasRmsamplitudeZ()) {
          setRmsamplitudeZ(other.getRmsamplitudeZ());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSensortype()) {
          
          return false;
        }
        if (!hasSensorname()) {
          
          return false;
        }
        if (!hasMeanX()) {
          
          return false;
        }
        if (!hasMeanY()) {
          
          return false;
        }
        if (!hasMeanZ()) {
          
          return false;
        }
        if (!hasMinX()) {
          
          return false;
        }
        if (!hasMinY()) {
          
          return false;
        }
        if (!hasMinZ()) {
          
          return false;
        }
        if (!hasMaxX()) {
          
          return false;
        }
        if (!hasMaxY()) {
          
          return false;
        }
        if (!hasMaxZ()) {
          
          return false;
        }
        if (!hasStddevX()) {
          
          return false;
        }
        if (!hasStddevY()) {
          
          return false;
        }
        if (!hasStddevZ()) {
          
          return false;
        }
        if (!hasAvgdevX()) {
          
          return false;
        }
        if (!hasAvgdevY()) {
          
          return false;
        }
        if (!hasAvgdevZ()) {
          
          return false;
        }
        if (!hasSkewnessX()) {
          
          return false;
        }
        if (!hasSkewnessY()) {
          
          return false;
        }
        if (!hasSkewnessZ()) {
          
          return false;
        }
        if (!hasKurtosisX()) {
          
          return false;
        }
        if (!hasKurtosisY()) {
          
          return false;
        }
        if (!hasKurtosisZ()) {
          
          return false;
        }
        if (!hasRmsamplitudeX()) {
          
          return false;
        }
        if (!hasRmsamplitudeY()) {
          
          return false;
        }
        if (!hasRmsamplitudeZ()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        de.hszemi.sensorid_test.TestData.FeatureVector parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (de.hszemi.sensorid_test.TestData.FeatureVector) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object sensortype_ = "";
      /**
       * <code>required string sensortype = 1;</code>
       */
      public boolean hasSensortype() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string sensortype = 1;</code>
       */
      public java.lang.String getSensortype() {
        java.lang.Object ref = sensortype_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            sensortype_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string sensortype = 1;</code>
       */
      public com.google.protobuf.ByteString
          getSensortypeBytes() {
        java.lang.Object ref = sensortype_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          sensortype_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string sensortype = 1;</code>
       */
      public Builder setSensortype(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        sensortype_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string sensortype = 1;</code>
       */
      public Builder clearSensortype() {
        bitField0_ = (bitField0_ & ~0x00000001);
        sensortype_ = getDefaultInstance().getSensortype();
        onChanged();
        return this;
      }
      /**
       * <code>required string sensortype = 1;</code>
       */
      public Builder setSensortypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        sensortype_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object sensorname_ = "";
      /**
       * <code>required string sensorname = 2;</code>
       */
      public boolean hasSensorname() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string sensorname = 2;</code>
       */
      public java.lang.String getSensorname() {
        java.lang.Object ref = sensorname_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            sensorname_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string sensorname = 2;</code>
       */
      public com.google.protobuf.ByteString
          getSensornameBytes() {
        java.lang.Object ref = sensorname_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          sensorname_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string sensorname = 2;</code>
       */
      public Builder setSensorname(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        sensorname_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string sensorname = 2;</code>
       */
      public Builder clearSensorname() {
        bitField0_ = (bitField0_ & ~0x00000002);
        sensorname_ = getDefaultInstance().getSensorname();
        onChanged();
        return this;
      }
      /**
       * <code>required string sensorname = 2;</code>
       */
      public Builder setSensornameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        sensorname_ = value;
        onChanged();
        return this;
      }

      private double meanX_ ;
      /**
       * <code>required double mean_x = 3;</code>
       */
      public boolean hasMeanX() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required double mean_x = 3;</code>
       */
      public double getMeanX() {
        return meanX_;
      }
      /**
       * <code>required double mean_x = 3;</code>
       */
      public Builder setMeanX(double value) {
        bitField0_ |= 0x00000004;
        meanX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double mean_x = 3;</code>
       */
      public Builder clearMeanX() {
        bitField0_ = (bitField0_ & ~0x00000004);
        meanX_ = 0D;
        onChanged();
        return this;
      }

      private double meanY_ ;
      /**
       * <code>required double mean_y = 4;</code>
       */
      public boolean hasMeanY() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required double mean_y = 4;</code>
       */
      public double getMeanY() {
        return meanY_;
      }
      /**
       * <code>required double mean_y = 4;</code>
       */
      public Builder setMeanY(double value) {
        bitField0_ |= 0x00000008;
        meanY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double mean_y = 4;</code>
       */
      public Builder clearMeanY() {
        bitField0_ = (bitField0_ & ~0x00000008);
        meanY_ = 0D;
        onChanged();
        return this;
      }

      private double meanZ_ ;
      /**
       * <code>required double mean_z = 5;</code>
       */
      public boolean hasMeanZ() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required double mean_z = 5;</code>
       */
      public double getMeanZ() {
        return meanZ_;
      }
      /**
       * <code>required double mean_z = 5;</code>
       */
      public Builder setMeanZ(double value) {
        bitField0_ |= 0x00000010;
        meanZ_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double mean_z = 5;</code>
       */
      public Builder clearMeanZ() {
        bitField0_ = (bitField0_ & ~0x00000010);
        meanZ_ = 0D;
        onChanged();
        return this;
      }

      private double minX_ ;
      /**
       * <code>required double min_x = 6;</code>
       */
      public boolean hasMinX() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required double min_x = 6;</code>
       */
      public double getMinX() {
        return minX_;
      }
      /**
       * <code>required double min_x = 6;</code>
       */
      public Builder setMinX(double value) {
        bitField0_ |= 0x00000020;
        minX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double min_x = 6;</code>
       */
      public Builder clearMinX() {
        bitField0_ = (bitField0_ & ~0x00000020);
        minX_ = 0D;
        onChanged();
        return this;
      }

      private double minY_ ;
      /**
       * <code>required double min_y = 7;</code>
       */
      public boolean hasMinY() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required double min_y = 7;</code>
       */
      public double getMinY() {
        return minY_;
      }
      /**
       * <code>required double min_y = 7;</code>
       */
      public Builder setMinY(double value) {
        bitField0_ |= 0x00000040;
        minY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double min_y = 7;</code>
       */
      public Builder clearMinY() {
        bitField0_ = (bitField0_ & ~0x00000040);
        minY_ = 0D;
        onChanged();
        return this;
      }

      private double minZ_ ;
      /**
       * <code>required double min_z = 8;</code>
       */
      public boolean hasMinZ() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required double min_z = 8;</code>
       */
      public double getMinZ() {
        return minZ_;
      }
      /**
       * <code>required double min_z = 8;</code>
       */
      public Builder setMinZ(double value) {
        bitField0_ |= 0x00000080;
        minZ_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double min_z = 8;</code>
       */
      public Builder clearMinZ() {
        bitField0_ = (bitField0_ & ~0x00000080);
        minZ_ = 0D;
        onChanged();
        return this;
      }

      private double maxX_ ;
      /**
       * <code>required double max_x = 9;</code>
       */
      public boolean hasMaxX() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>required double max_x = 9;</code>
       */
      public double getMaxX() {
        return maxX_;
      }
      /**
       * <code>required double max_x = 9;</code>
       */
      public Builder setMaxX(double value) {
        bitField0_ |= 0x00000100;
        maxX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double max_x = 9;</code>
       */
      public Builder clearMaxX() {
        bitField0_ = (bitField0_ & ~0x00000100);
        maxX_ = 0D;
        onChanged();
        return this;
      }

      private double maxY_ ;
      /**
       * <code>required double max_y = 10;</code>
       */
      public boolean hasMaxY() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>required double max_y = 10;</code>
       */
      public double getMaxY() {
        return maxY_;
      }
      /**
       * <code>required double max_y = 10;</code>
       */
      public Builder setMaxY(double value) {
        bitField0_ |= 0x00000200;
        maxY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double max_y = 10;</code>
       */
      public Builder clearMaxY() {
        bitField0_ = (bitField0_ & ~0x00000200);
        maxY_ = 0D;
        onChanged();
        return this;
      }

      private double maxZ_ ;
      /**
       * <code>required double max_z = 11;</code>
       */
      public boolean hasMaxZ() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>required double max_z = 11;</code>
       */
      public double getMaxZ() {
        return maxZ_;
      }
      /**
       * <code>required double max_z = 11;</code>
       */
      public Builder setMaxZ(double value) {
        bitField0_ |= 0x00000400;
        maxZ_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double max_z = 11;</code>
       */
      public Builder clearMaxZ() {
        bitField0_ = (bitField0_ & ~0x00000400);
        maxZ_ = 0D;
        onChanged();
        return this;
      }

      private double stddevX_ ;
      /**
       * <code>required double stddev_x = 12;</code>
       */
      public boolean hasStddevX() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>required double stddev_x = 12;</code>
       */
      public double getStddevX() {
        return stddevX_;
      }
      /**
       * <code>required double stddev_x = 12;</code>
       */
      public Builder setStddevX(double value) {
        bitField0_ |= 0x00000800;
        stddevX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double stddev_x = 12;</code>
       */
      public Builder clearStddevX() {
        bitField0_ = (bitField0_ & ~0x00000800);
        stddevX_ = 0D;
        onChanged();
        return this;
      }

      private double stddevY_ ;
      /**
       * <code>required double stddev_y = 13;</code>
       */
      public boolean hasStddevY() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>required double stddev_y = 13;</code>
       */
      public double getStddevY() {
        return stddevY_;
      }
      /**
       * <code>required double stddev_y = 13;</code>
       */
      public Builder setStddevY(double value) {
        bitField0_ |= 0x00001000;
        stddevY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double stddev_y = 13;</code>
       */
      public Builder clearStddevY() {
        bitField0_ = (bitField0_ & ~0x00001000);
        stddevY_ = 0D;
        onChanged();
        return this;
      }

      private double stddevZ_ ;
      /**
       * <code>required double stddev_z = 14;</code>
       */
      public boolean hasStddevZ() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>required double stddev_z = 14;</code>
       */
      public double getStddevZ() {
        return stddevZ_;
      }
      /**
       * <code>required double stddev_z = 14;</code>
       */
      public Builder setStddevZ(double value) {
        bitField0_ |= 0x00002000;
        stddevZ_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double stddev_z = 14;</code>
       */
      public Builder clearStddevZ() {
        bitField0_ = (bitField0_ & ~0x00002000);
        stddevZ_ = 0D;
        onChanged();
        return this;
      }

      private double avgdevX_ ;
      /**
       * <code>required double avgdev_x = 15;</code>
       */
      public boolean hasAvgdevX() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>required double avgdev_x = 15;</code>
       */
      public double getAvgdevX() {
        return avgdevX_;
      }
      /**
       * <code>required double avgdev_x = 15;</code>
       */
      public Builder setAvgdevX(double value) {
        bitField0_ |= 0x00004000;
        avgdevX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double avgdev_x = 15;</code>
       */
      public Builder clearAvgdevX() {
        bitField0_ = (bitField0_ & ~0x00004000);
        avgdevX_ = 0D;
        onChanged();
        return this;
      }

      private double avgdevY_ ;
      /**
       * <code>required double avgdev_y = 16;</code>
       */
      public boolean hasAvgdevY() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>required double avgdev_y = 16;</code>
       */
      public double getAvgdevY() {
        return avgdevY_;
      }
      /**
       * <code>required double avgdev_y = 16;</code>
       */
      public Builder setAvgdevY(double value) {
        bitField0_ |= 0x00008000;
        avgdevY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double avgdev_y = 16;</code>
       */
      public Builder clearAvgdevY() {
        bitField0_ = (bitField0_ & ~0x00008000);
        avgdevY_ = 0D;
        onChanged();
        return this;
      }

      private double avgdevZ_ ;
      /**
       * <code>required double avgdev_z = 17;</code>
       */
      public boolean hasAvgdevZ() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>required double avgdev_z = 17;</code>
       */
      public double getAvgdevZ() {
        return avgdevZ_;
      }
      /**
       * <code>required double avgdev_z = 17;</code>
       */
      public Builder setAvgdevZ(double value) {
        bitField0_ |= 0x00010000;
        avgdevZ_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double avgdev_z = 17;</code>
       */
      public Builder clearAvgdevZ() {
        bitField0_ = (bitField0_ & ~0x00010000);
        avgdevZ_ = 0D;
        onChanged();
        return this;
      }

      private double skewnessX_ ;
      /**
       * <code>required double skewness_x = 18;</code>
       */
      public boolean hasSkewnessX() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>required double skewness_x = 18;</code>
       */
      public double getSkewnessX() {
        return skewnessX_;
      }
      /**
       * <code>required double skewness_x = 18;</code>
       */
      public Builder setSkewnessX(double value) {
        bitField0_ |= 0x00020000;
        skewnessX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double skewness_x = 18;</code>
       */
      public Builder clearSkewnessX() {
        bitField0_ = (bitField0_ & ~0x00020000);
        skewnessX_ = 0D;
        onChanged();
        return this;
      }

      private double skewnessY_ ;
      /**
       * <code>required double skewness_y = 19;</code>
       */
      public boolean hasSkewnessY() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>required double skewness_y = 19;</code>
       */
      public double getSkewnessY() {
        return skewnessY_;
      }
      /**
       * <code>required double skewness_y = 19;</code>
       */
      public Builder setSkewnessY(double value) {
        bitField0_ |= 0x00040000;
        skewnessY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double skewness_y = 19;</code>
       */
      public Builder clearSkewnessY() {
        bitField0_ = (bitField0_ & ~0x00040000);
        skewnessY_ = 0D;
        onChanged();
        return this;
      }

      private double skewnessZ_ ;
      /**
       * <code>required double skewness_z = 20;</code>
       */
      public boolean hasSkewnessZ() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>required double skewness_z = 20;</code>
       */
      public double getSkewnessZ() {
        return skewnessZ_;
      }
      /**
       * <code>required double skewness_z = 20;</code>
       */
      public Builder setSkewnessZ(double value) {
        bitField0_ |= 0x00080000;
        skewnessZ_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double skewness_z = 20;</code>
       */
      public Builder clearSkewnessZ() {
        bitField0_ = (bitField0_ & ~0x00080000);
        skewnessZ_ = 0D;
        onChanged();
        return this;
      }

      private double kurtosisX_ ;
      /**
       * <code>required double kurtosis_x = 21;</code>
       */
      public boolean hasKurtosisX() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>required double kurtosis_x = 21;</code>
       */
      public double getKurtosisX() {
        return kurtosisX_;
      }
      /**
       * <code>required double kurtosis_x = 21;</code>
       */
      public Builder setKurtosisX(double value) {
        bitField0_ |= 0x00100000;
        kurtosisX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double kurtosis_x = 21;</code>
       */
      public Builder clearKurtosisX() {
        bitField0_ = (bitField0_ & ~0x00100000);
        kurtosisX_ = 0D;
        onChanged();
        return this;
      }

      private double kurtosisY_ ;
      /**
       * <code>required double kurtosis_y = 22;</code>
       */
      public boolean hasKurtosisY() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>required double kurtosis_y = 22;</code>
       */
      public double getKurtosisY() {
        return kurtosisY_;
      }
      /**
       * <code>required double kurtosis_y = 22;</code>
       */
      public Builder setKurtosisY(double value) {
        bitField0_ |= 0x00200000;
        kurtosisY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double kurtosis_y = 22;</code>
       */
      public Builder clearKurtosisY() {
        bitField0_ = (bitField0_ & ~0x00200000);
        kurtosisY_ = 0D;
        onChanged();
        return this;
      }

      private double kurtosisZ_ ;
      /**
       * <code>required double kurtosis_z = 23;</code>
       */
      public boolean hasKurtosisZ() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>required double kurtosis_z = 23;</code>
       */
      public double getKurtosisZ() {
        return kurtosisZ_;
      }
      /**
       * <code>required double kurtosis_z = 23;</code>
       */
      public Builder setKurtosisZ(double value) {
        bitField0_ |= 0x00400000;
        kurtosisZ_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double kurtosis_z = 23;</code>
       */
      public Builder clearKurtosisZ() {
        bitField0_ = (bitField0_ & ~0x00400000);
        kurtosisZ_ = 0D;
        onChanged();
        return this;
      }

      private double rmsamplitudeX_ ;
      /**
       * <code>required double rmsamplitude_x = 24;</code>
       */
      public boolean hasRmsamplitudeX() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>required double rmsamplitude_x = 24;</code>
       */
      public double getRmsamplitudeX() {
        return rmsamplitudeX_;
      }
      /**
       * <code>required double rmsamplitude_x = 24;</code>
       */
      public Builder setRmsamplitudeX(double value) {
        bitField0_ |= 0x00800000;
        rmsamplitudeX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double rmsamplitude_x = 24;</code>
       */
      public Builder clearRmsamplitudeX() {
        bitField0_ = (bitField0_ & ~0x00800000);
        rmsamplitudeX_ = 0D;
        onChanged();
        return this;
      }

      private double rmsamplitudeY_ ;
      /**
       * <code>required double rmsamplitude_y = 25;</code>
       */
      public boolean hasRmsamplitudeY() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>required double rmsamplitude_y = 25;</code>
       */
      public double getRmsamplitudeY() {
        return rmsamplitudeY_;
      }
      /**
       * <code>required double rmsamplitude_y = 25;</code>
       */
      public Builder setRmsamplitudeY(double value) {
        bitField0_ |= 0x01000000;
        rmsamplitudeY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double rmsamplitude_y = 25;</code>
       */
      public Builder clearRmsamplitudeY() {
        bitField0_ = (bitField0_ & ~0x01000000);
        rmsamplitudeY_ = 0D;
        onChanged();
        return this;
      }

      private double rmsamplitudeZ_ ;
      /**
       * <code>required double rmsamplitude_z = 26;</code>
       */
      public boolean hasRmsamplitudeZ() {
        return ((bitField0_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>required double rmsamplitude_z = 26;</code>
       */
      public double getRmsamplitudeZ() {
        return rmsamplitudeZ_;
      }
      /**
       * <code>required double rmsamplitude_z = 26;</code>
       */
      public Builder setRmsamplitudeZ(double value) {
        bitField0_ |= 0x02000000;
        rmsamplitudeZ_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double rmsamplitude_z = 26;</code>
       */
      public Builder clearRmsamplitudeZ() {
        bitField0_ = (bitField0_ & ~0x02000000);
        rmsamplitudeZ_ = 0D;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:sensorid.FeatureVector)
    }

    static {
      defaultInstance = new FeatureVector(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:sensorid.FeatureVector)
  }

  public interface TestResultOrBuilder extends
      // @@protoc_insertion_point(interface_extends:sensorid.TestResult)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required string result_displayname = 1;</code>
     */
    boolean hasResultDisplayname();
    /**
     * <code>required string result_displayname = 1;</code>
     */
    java.lang.String getResultDisplayname();
    /**
     * <code>required string result_displayname = 1;</code>
     */
    com.google.protobuf.ByteString
        getResultDisplaynameBytes();
  }
  /**
   * Protobuf type {@code sensorid.TestResult}
   */
  public static final class TestResult extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:sensorid.TestResult)
      TestResultOrBuilder {
    // Use TestResult.newBuilder() to construct.
    private TestResult(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TestResult(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TestResult defaultInstance;
    public static TestResult getDefaultInstance() {
      return defaultInstance;
    }

    public TestResult getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TestResult(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              resultDisplayname_ = bs;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return de.hszemi.sensorid_test.TestData.internal_static_sensorid_TestResult_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return de.hszemi.sensorid_test.TestData.internal_static_sensorid_TestResult_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              de.hszemi.sensorid_test.TestData.TestResult.class, de.hszemi.sensorid_test.TestData.TestResult.Builder.class);
    }

    public static com.google.protobuf.Parser<TestResult> PARSER =
        new com.google.protobuf.AbstractParser<TestResult>() {
      public TestResult parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TestResult(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TestResult> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int RESULT_DISPLAYNAME_FIELD_NUMBER = 1;
    private java.lang.Object resultDisplayname_;
    /**
     * <code>required string result_displayname = 1;</code>
     */
    public boolean hasResultDisplayname() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string result_displayname = 1;</code>
     */
    public java.lang.String getResultDisplayname() {
      java.lang.Object ref = resultDisplayname_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          resultDisplayname_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string result_displayname = 1;</code>
     */
    public com.google.protobuf.ByteString
        getResultDisplaynameBytes() {
      java.lang.Object ref = resultDisplayname_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        resultDisplayname_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      resultDisplayname_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasResultDisplayname()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getResultDisplaynameBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getResultDisplaynameBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static de.hszemi.sensorid_test.TestData.TestResult parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static de.hszemi.sensorid_test.TestData.TestResult parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static de.hszemi.sensorid_test.TestData.TestResult parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static de.hszemi.sensorid_test.TestData.TestResult parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static de.hszemi.sensorid_test.TestData.TestResult parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static de.hszemi.sensorid_test.TestData.TestResult parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static de.hszemi.sensorid_test.TestData.TestResult parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static de.hszemi.sensorid_test.TestData.TestResult parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static de.hszemi.sensorid_test.TestData.TestResult parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static de.hszemi.sensorid_test.TestData.TestResult parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(de.hszemi.sensorid_test.TestData.TestResult prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code sensorid.TestResult}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:sensorid.TestResult)
        de.hszemi.sensorid_test.TestData.TestResultOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return de.hszemi.sensorid_test.TestData.internal_static_sensorid_TestResult_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return de.hszemi.sensorid_test.TestData.internal_static_sensorid_TestResult_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                de.hszemi.sensorid_test.TestData.TestResult.class, de.hszemi.sensorid_test.TestData.TestResult.Builder.class);
      }

      // Construct using de.hszemi.sensorid_test.TestData.TestResult.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        resultDisplayname_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return de.hszemi.sensorid_test.TestData.internal_static_sensorid_TestResult_descriptor;
      }

      public de.hszemi.sensorid_test.TestData.TestResult getDefaultInstanceForType() {
        return de.hszemi.sensorid_test.TestData.TestResult.getDefaultInstance();
      }

      public de.hszemi.sensorid_test.TestData.TestResult build() {
        de.hszemi.sensorid_test.TestData.TestResult result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public de.hszemi.sensorid_test.TestData.TestResult buildPartial() {
        de.hszemi.sensorid_test.TestData.TestResult result = new de.hszemi.sensorid_test.TestData.TestResult(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.resultDisplayname_ = resultDisplayname_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof de.hszemi.sensorid_test.TestData.TestResult) {
          return mergeFrom((de.hszemi.sensorid_test.TestData.TestResult)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(de.hszemi.sensorid_test.TestData.TestResult other) {
        if (other == de.hszemi.sensorid_test.TestData.TestResult.getDefaultInstance()) return this;
        if (other.hasResultDisplayname()) {
          bitField0_ |= 0x00000001;
          resultDisplayname_ = other.resultDisplayname_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasResultDisplayname()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        de.hszemi.sensorid_test.TestData.TestResult parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (de.hszemi.sensorid_test.TestData.TestResult) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object resultDisplayname_ = "";
      /**
       * <code>required string result_displayname = 1;</code>
       */
      public boolean hasResultDisplayname() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string result_displayname = 1;</code>
       */
      public java.lang.String getResultDisplayname() {
        java.lang.Object ref = resultDisplayname_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            resultDisplayname_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string result_displayname = 1;</code>
       */
      public com.google.protobuf.ByteString
          getResultDisplaynameBytes() {
        java.lang.Object ref = resultDisplayname_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          resultDisplayname_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string result_displayname = 1;</code>
       */
      public Builder setResultDisplayname(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        resultDisplayname_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string result_displayname = 1;</code>
       */
      public Builder clearResultDisplayname() {
        bitField0_ = (bitField0_ & ~0x00000001);
        resultDisplayname_ = getDefaultInstance().getResultDisplayname();
        onChanged();
        return this;
      }
      /**
       * <code>required string result_displayname = 1;</code>
       */
      public Builder setResultDisplaynameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        resultDisplayname_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:sensorid.TestResult)
    }

    static {
      defaultInstance = new TestResult(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:sensorid.TestResult)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_sensorid_FeatureVector_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_sensorid_FeatureVector_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_sensorid_TestResult_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_sensorid_TestResult_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\016TestData.proto\022\010sensorid\"\355\003\n\rFeatureVe" +
      "ctor\022\022\n\nsensortype\030\001 \002(\t\022\022\n\nsensorname\030\002" +
      " \002(\t\022\016\n\006mean_x\030\003 \002(\001\022\016\n\006mean_y\030\004 \002(\001\022\016\n\006" +
      "mean_z\030\005 \002(\001\022\r\n\005min_x\030\006 \002(\001\022\r\n\005min_y\030\007 \002" +
      "(\001\022\r\n\005min_z\030\010 \002(\001\022\r\n\005max_x\030\t \002(\001\022\r\n\005max_" +
      "y\030\n \002(\001\022\r\n\005max_z\030\013 \002(\001\022\020\n\010stddev_x\030\014 \002(\001" +
      "\022\020\n\010stddev_y\030\r \002(\001\022\020\n\010stddev_z\030\016 \002(\001\022\020\n\010" +
      "avgdev_x\030\017 \002(\001\022\020\n\010avgdev_y\030\020 \002(\001\022\020\n\010avgd" +
      "ev_z\030\021 \002(\001\022\022\n\nskewness_x\030\022 \002(\001\022\022\n\nskewne" +
      "ss_y\030\023 \002(\001\022\022\n\nskewness_z\030\024 \002(\001\022\022\n\nkurtos",
      "is_x\030\025 \002(\001\022\022\n\nkurtosis_y\030\026 \002(\001\022\022\n\nkurtos" +
      "is_z\030\027 \002(\001\022\026\n\016rmsamplitude_x\030\030 \002(\001\022\026\n\016rm" +
      "samplitude_y\030\031 \002(\001\022\026\n\016rmsamplitude_z\030\032 \002" +
      "(\001\"(\n\nTestResult\022\032\n\022result_displayname\030\001" +
      " \002(\tB\031\n\027de.hszemi.sensorid_test"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_sensorid_FeatureVector_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_sensorid_FeatureVector_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_sensorid_FeatureVector_descriptor,
        new java.lang.String[] { "Sensortype", "Sensorname", "MeanX", "MeanY", "MeanZ", "MinX", "MinY", "MinZ", "MaxX", "MaxY", "MaxZ", "StddevX", "StddevY", "StddevZ", "AvgdevX", "AvgdevY", "AvgdevZ", "SkewnessX", "SkewnessY", "SkewnessZ", "KurtosisX", "KurtosisY", "KurtosisZ", "RmsamplitudeX", "RmsamplitudeY", "RmsamplitudeZ", });
    internal_static_sensorid_TestResult_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_sensorid_TestResult_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_sensorid_TestResult_descriptor,
        new java.lang.String[] { "ResultDisplayname", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
